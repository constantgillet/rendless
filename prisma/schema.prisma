generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id             String         @id
    sessions       Session[]
    email          String         @unique
    username       String         @unique
    hashedPassword String
    Template       Template[]
    Token          Token[]
    Subscription   Subscription[]
}

model Session {
    id        String   @id
    userId    String
    expiresAt DateTime
    user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Template {
    id     String  @id @unique
    name   String  @unique //Slugname
    tree   Json
    user   User    @relation(fields: [userId], references: [id])
    userId String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt @default(now())
    Asset  Asset[]
}

model Asset {
    id         String   @id @unique @default(uuid())
    url        String
    template   Template @relation(fields: [templateId], references: [id])
    templateId String
}

model Token {
    id         String    @id @default(cuid())
    name       String
    hashedKey  String    @unique
    partialKey String
    lastUsed   DateTime?
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt
    user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId     String

    @@index([userId])
}

model ResetPassword {
    id        String   @id @default(cuid())
    token     String   @unique
    expiresAt DateTime
    userId    String
    createdAt DateTime @default(now())
}

model WebhookEvent {
    id              Int      @id @default(autoincrement())
    createdAt       DateTime @default(now())
    eventName       String
    processed       Boolean  @default(false)
    body            Json
    processingError String?
}

model Subscription {
    id                 Int     @id @default(autoincrement())
    lemonSqueezyId     String  @unique
    orderId            Int
    name               String
    email              String
    status             String
    statusFormatted    String
    renewsAt           String?
    endsAt             String?
    trialEndsAt        String?
    price              String
    isUsageBased       Boolean @default(false)
    isPaused           Boolean @default(false)
    subscriptionItemId Int     @default(autoincrement())
    userId             String
    planId             Int
    user               User    @relation(fields: [userId], references: [id])
    plan               Plan    @relation(fields: [planId], references: [id])
}

model Plan {
    id                 Int            @id @default(autoincrement())
    productId          Int
    productName        String?
    variantId          Int            @unique
    name               String
    description        String?
    price              String
    isUsageBased       Boolean        @default(false)
    interval           String?
    intervalCount      Int?
    trialInterval      String?
    trialIntervalCount Int?
    sort               Int?
    Subscription       Subscription[] @relation()
}
